(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{172:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),s("p",[t._v("下面举一些例子（假设你已经在项目写好了一个带有 index/info 方法的控制器 home）：")]),t._m(7),s("p",[t._v("如果请求的路径不能匹配这一路由规则，那么 ServerHub 会将其当作是对静态资源的请求，会触发 Cache 系统来加载、缓存。")]),s("p",[t._v("如何指定正路由呢？请看下例：")]),t._m(8),t._m(9),t._m(10),s("p",[t._v("**反路由规则永远会在正路由被检查之前先被执行！**如果任何请求匹配了反路由，则永远不会再进行正匹配，也就是会立即被作为静态资源请求被处理。")]),t._m(11),s("p",[t._v("下面给出几个例子：")]),t._m(12),t._m(13),t._m(14),s("p",[t._v("有一点需要注意的是，这一类规则必须要用“/”作为开头，否则请使用正则表达式。")]),t._m(15),s("p",[t._v("假如你想要完全屏蔽所有以“no-route”开头的请求怎么办？难道要把所有可能都写出来吗？显然是不现实的。所以我们直接将正则表达式传入该方法，进而将所有以“no-route”为前缀（无论大小写）的请求都屏蔽。")]),t._m(16),t._m(17),t._m(18),t._m(19),s("p",[t._v("根据 "),s("a",{attrs:{href:"https://tools.ietf.org/html/rfc1738",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 1738"),s("OutboundLink")],1),t._v("，一个合法的 URL 查询是这样定义的：")]),t._m(20),s("p",[t._v("具体一点，ServerHub 限制了：")]),t._m(21),s("p",[t._v("请一定遵循上述规则，因为后续版本的 ServerHub 很可能会强制忽略掉不符合该规则的查询串导致你的应用程序无法正常工作。")])])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[this._v("#")]),this._v(" 路由")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("Route 是 ServerHub 的核心之一。有了路由，所有的 HTTP 请求都可以被过滤并发往正确的处理程式（比如控制器和缓存命中器）。举个例子， "),a("code",[this._v("/index.html")]),this._v(" 可能是一个静态页面，但 "),a("code",[this._v("/home/index")]),this._v(" 却可能是一个控制器的 URL。ServerHub 的路由系统提供了两种手段来处理这些 URL 的分辨问题。一个叫做正路由，而另一个叫反路由。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"正路由规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正路由规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 正路由规则")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("正路由看起来就像是 ES6 当中的字符串模板语法，你可以看到成对的花括号。每一对括号之间是路由规则的一个段。而合法的段有如下几种： "),a("strong",[this._v("controller, action")]),this._v(" 和 "),a("strong",[this._v("id")]),this._v('。举个例子： "'),a("code",[this._v("api/{controller}/{action}/{id}")]),this._v('"。')])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("而前缀 "),a("code",[this._v("api")]),this._v(" 则是一个普通的文本。每个请求要想匹配上述规则，就一定要加上这样一个前缀。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("code",[this._v("controller")]),this._v(" 是控制器的名称，恰恰就是控制器文件的名字。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("code",[this._v("action")]),this._v(" 是控制器脚本中定义的函数成员（属性）。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[this._v("能被匹配的请求：\n  /api/home/index\n  /api/home/info/\n  /api/home/index/5\n  /api/home/index/5?name=xu_wangzhe\n  /api/home/index/?name=xu_wangzhe\n\n不能被匹配的请求：\n  /home/index\n  /api/home/index.html\n  /api/home/5\n  /api/index/5?name=xu_wangzhe\n  /api/home-foo/index/?name=xu_wangzhe\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("route "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  route"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("MapRoute")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"default"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"v1/{controller}/{action}/{id}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("将这个匿名函数传入 "),a("code",[this._v("instance.Run()")]),this._v(" 方法的第二参数即可。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"反路由规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反路由规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 反路由规则")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("反路由规则 "),a("strong",[this._v("同时")]),this._v(" 支持字符串定义和正则表达式定义。你只需提供一个包含反路由的数组就可以了。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"字符串规则的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串规则的例子","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串规则的例子")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("route"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("IgnoreRoute")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v('"/language/all"')]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("如你所见， "),s("code",[t._v("language")]),t._v(" 控制器可能会有 "),s("code",[t._v("english")]),t._v(" 和 "),s("code",[t._v("chinese")]),t._v(" 方法，但是却没有定义 "),s("code",[t._v("all")]),t._v(" 方法。如果 ServerHub 试图根据某一次匹配而触发这个函数，则会产生异常。所以我们需要用这个来屏蔽掉这不科学的 URL 请求（改为指向静态资源）。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"正则表达式案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式案例","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则表达式案例")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("route"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("IgnoreRoute")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token regex"}},[t._v("/^\\/no-route.*$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"混合规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 混合规则")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("route"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("IgnoreRoute")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v('"/language/all"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token regex"}},[t._v("/^\\/no-route.*$/i")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"url-中的查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-中的查询","aria-hidden":"true"}},[this._v("#")]),this._v(" URL 中的查询")])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"language-rfc extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[this._v('search         = *[ uchar | ";" | ":" | "@" | "&" | "=" ]\nuchar          = unreserved | escape\nunreserved     = alpha | digit | safe | extra\nalpha          = lowalpha | hialpha\nlowalpha       = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" |\n                 "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" |\n                 "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" |\n                 "y" | "z"\nhialpha        = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |\n                 "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |\n                 "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"\ndigit          = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |\n                 "8" | "9"\nsafe           = "$" | "-" | "_" | "." | "+"\nextra          = "!" | "*" | "\'" | "(" | ")" | ","\nescape         = "%" hex hex\nhex            = digit | "A" | "B" | "C" | "D" | "E" | "F" |\n                 "a" | "b" | "c" | "d" | "e" | "f"\n')])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("? 作为查询的开始符。")]),a("li",[this._v("= 前面的标识符是查询的键。")]),a("li",[this._v("= 后面的标识符是查询的值。")]),a("li",[this._v("所有的查询由 & 作为分隔符。")])])}],!1,null,null,null);a.default=n.exports}}]);