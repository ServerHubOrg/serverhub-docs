(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{156:function(t,e,r){"use strict";r.r(e);var s=r(0),i=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._m(1),r("p",[r("router-link",{attrs:{to:"/zh/tutorial/getting-started.html#使用"}},[t._v("本节请查看这里")])],1),t._m(2),t._m(3),t._m(4),r("p",[t._v("与之前我们在 "),r("router-link",{attrs:{to:"/zh/tutorial/getting-started.html#使用"}},[t._v("Instance.Run()")]),t._v(" 一章中看到的不同，那个配置对象太复杂了。事实上，只有一个参数是必要的，那就是： "),r("code",[t._v("BaseDir")]),t._v(".")],1),t._m(5),r("p",[t._v("这就是能够让你的 ServerHub 应用正常工作的最基本配置了。")]),t._m(6),r("p",[t._v("自定义 ServerHub 时需要一些额外的配置。")]),t._m(7),t._m(8),t._m(9),r("p",[t._v("我们都知道，ServerHub 会把 HTTP 请求分发到 controller 上，如果要注册 controller，就应当指定 controller 所在的目录。所使用的 controller 目录应该是一个相对于服务器根目录的相对路径，ServerHub 中默认用“controller/”。")]),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),r("p",[t._v("通过此属性执行你所需的数据库支持包。当前版本你只可以使用 MySQL，也就是把“mysql”赋值给 DBProvider。")]),t._m(15),t._m(16),t._m(17),r("p",[t._v("此属性与 ServerHub 的缓存分配机制有关。如果文件大小超过了此配额，那么 ServerHub 就会通过 WCS 机制来主动卸载一些缓存，这个机制会在后面的章节详谈。")]),t._m(18),t._m(19),t._m(20),r("p",[t._v("一旦收到的请求不能找到对应的资源，或是没有相应的路由规则可以匹配，则 ServerHub 会渲染出 404 NOT Found 的页面返回。而从 v0.0.93 开始，你可以自己来指定这个错误页了。")]),t._m(21),t._m(22),r("p",[t._v("感谢阅读本章节，更多属性会在以后的更新中补充。")]),t._m(23),t._m(24),r("p",[t._v("这里有一则"),r("router-link",{attrs:{to:"/zh/tutorial/tls-tutorial.html"}},[t._v("教程")]),t._v("帮助你使用 TLS。")],1),t._m(25),t._m(26),r("p",[t._v("对于通信的另一端（通常是浏览器，此处以浏览器为例），你仅仅需要使用：")]),t._m(27),r("p",[t._v("即可建立连接。")]),r("p",[t._v("此配置对象有两个属性：")]),r("ul",[t._m(28),r("li",[r("code",[t._v("ConnectionCallback")]),t._v(" 是一个回调函数，它将在有 WebSocket 请求建立连接时执行。此函数接收一个 "),r("a",{attrs:{href:"https://github.com/websockets/ws",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket"),r("OutboundLink")],1),t._v(" 对象作为参数。")])]),t._m(29),t._m(30),r("p",[t._v("此方法返回了具有两个属性的对象。")]),t._m(31),t._m(32)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"instance-run-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instance-run-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" Instance.Run() 方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"serverhub-run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serverhub-run","aria-hidden":"true"}},[this._v("#")]),this._v(" ServerHub.Run()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"instance-run-参数配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instance-run-参数配置","aria-hidden":"true"}},[this._v("#")]),this._v(" Instance.Run() 参数配置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("前些天，我们了解了 "),e("code",[this._v("instance.Run()")]),this._v(" 方法。本章我们会继续探讨该方法的第一个配置参数： "),e("code",[this._v("instance.Run()")]),this._v(" 的配置对象。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"越简单越好"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#越简单越好","aria-hidden":"true"}},[this._v("#")]),this._v(" 越简单越好")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("BaseDir 是 服务器的根目录，它会被 ServerHub 应用程序引用于其生命周期的各个阶段。如果你的入口文件，比如 app.js，刚好位于你的服务器根目录，则只需将 "),e("code",[this._v("__dirname")]),this._v(" 传过去即可。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"其他的配置参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他的配置参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他的配置参数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"webdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webdir","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("WebDir")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("WebDir")]),this._v(" 就是你网站的根目录。你的页面文件、资源文件、脚本文件和素材都应该被放在这里面。ServerHub 默认使用“www/”作为其值。如果你要设置一个另外的网站根目录，请先创建一个目录，并将其名字传给 "),e("code",[this._v("WebDir")]),this._v(" 属性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"controllerdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controllerdir","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("ControllerDir")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"controllers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controllers","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("Controllers")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("有些情况下，我们不希望 controller 目录下的所有文件都被注册进去（比如你放置了非控制器的文件）。那么此时，可以将所需的文件名通过数组传给此属性。比如： "),e("code",[this._v("['home.js', 'data.js']")]),this._v("。但如果你想把所有的文件都一并注册了，很简单，不要加入此属性即可。ServerHub 会自动扫描并注册 "),e("code",[this._v("ControllerDir")]),this._v(" 中所有文件。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"viewdir-和-modeldir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#viewdir-和-modeldir","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("ViewDir")]),this._v(" 和 "),e("code",[this._v("ModelDir")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("与 "),e("code",[this._v("ControllerDir")]),this._v(" 类似，它们用于存放视图和模型。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"dbprovider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dbprovider","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("DBProvider")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"dbconnectionstring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dbconnectionstring","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("DBConnectionString")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你只有一个数据库实例要使用，那么我建议你将一个全局数据库连接字符串传入 ServerHub。因为如果你不这样，你就必须要在每次调用 "),e("code",[this._v("GetConnection()")]),this._v(" 方法时传入数据库连接字符串。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"maxcachesize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxcachesize","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("MaxCacheSize")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"defaultpages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultpages","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("DefaultPages")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ServerHub 在处理默认页时引入了一个优先匹配和回滚策略。你的默认页必须放在 WebDir 目录。默认情况下，ServerHub 会首先寻找“index.html”，然后再找“default.html”，如果还是没有，就去寻找“page.html”。当然，你可以用一个形如 "),e("code",[this._v("['hello.html', 'first.html']")]),this._v(" 的数组来强制覆盖此回滚策略。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"pagenotfound-v0-0-93"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pagenotfound-v0-0-93","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("PageNotFound")]),e("code",[this._v("v0.0.93+")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"asyncoperationtimeout-v0-0-97"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asyncoperationtimeout-v0-0-97","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("AsyncOperationTimeout")]),e("code",[this._v("v0.0.97+")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("自从 "),r("code",[t._v("v0.0.96")]),t._v(" 引入 "),r("code",[t._v("this.Runtime.WAIT")]),t._v(" 信号量之后，我们已经可以在控制器中实现一些耗时的异步操作逻辑，比如数据库查询操作。但是你应该知道，这个信号量其实是非常危险的，因为如果你忘记将其置为 "),r("code",[t._v("false")]),t._v(" 或是因为操作太耗时而在中间过程中断开连接，则可能会出现严重的问题（得不到相应，甚至服务器程序崩溃）。所以 ServerHub 内置了倒数计时，如果操作时间超过这个阈值，则会停止等待，立即返回响应（可能是空响应）。在返回响应的同时，还会在服务器端的控制台输出错误信息（此输出特性可能在将来的版本中移除或迁移到日志中）。默认阈值为 10 秒钟，你可以通过将此变量传入来缩短或延长该值。（单位为 "),r("strong",[t._v("毫秒")]),t._v("）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"tlsoption-v1-0-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tlsoption-v1-0-6","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("TLSOption")]),e("code",[this._v("v1.0.6+")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("自 "),e("code",[this._v("v1.0.6")]),this._v(" 开始，ServerHub 大大增强了连接安全性。你可以通过此属性来配置 TLS 证书。此属性由 4 个子属性构成： "),e("code",[this._v("Key: string、 Cert: string、 CA: string")]),this._v(" 和 "),e("code",[this._v("Port: Array<string>|Array<number>|number|string")]),this._v("。你需要把私钥与证书载入并赋值给上述属性，然后把需要 TLS 连接的端口号指定给 Port 属性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"socketoptions-v1-6-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#socketoptions-v1-6-0","aria-hidden":"true"}},[this._v("#")]),this._v(" SocketOptions "),e("code",[this._v("v1.6.0")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("v1.6.0")]),this._v(" 之后，ServerHub 将会开放和逐渐完善其对 WebSocket 的支持。这一重要特性将会极大拓展你使用它来开发实时应用程序的能力。比如一个在线的聊天室或是广播系统。通常，你可以将 ServerHub 的 WebSocket 侦听对象附着于任意的服务器端口上，甚至是 TLS 端口。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{attrs:{class:"token class-name"}},[t._v("WebSocket")]),r("span",{attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{attrs:{class:"token string"}},[t._v("'ws://hostname:port/'")]),r("span",{attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{attrs:{class:"token class-name"}},[t._v("WebSocket")]),r("span",{attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{attrs:{class:"token string"}},[t._v("'wss://hostname:port/'")]),r("span",{attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{attrs:{class:"token comment"}},[t._v("// TLS")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("code",[this._v("Port")]),this._v(" 可以是一个单一端口号或是一组端口号。但是它必须是全局配置对象中 "),e("code",[this._v("Port")]),this._v(" 值的子集。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下面说说 TLS 支持的特殊之处。早在 ServerHub 的 "),e("code",[this._v("v1.0.6")]),this._v(" 版本中，开发者就可以享受安全的 TLS 支持了。彼时，你可以使用自签署的 TLS 证书在本地进行调试。但是 WebSocket 完全不同，你无法再使用自签署的证书来支持基于 TLS 的 WebSocket 了。你的浏览器会因为证书授权方不合法而拒绝建立连接。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"方法返回值-v1-6-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法返回值-v1-6-0","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法返回值 "),e("code",[this._v("v1.6.0")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("Servers")]),this._v(" （数组）")]),e("li",[e("code",[this._v("Sockets")]),this._v(" （数组）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Servers")]),this._v(" 包含了所有成功启动并侦听你所指定的端口的 HTTP/HTTPS 服务器实例。"),e("code",[this._v("Sockets")]),this._v(" 则包括了所有附着在既有 HTTP/HTTPS 服务实例的 WebSocket 监听对象。")])}],!1,null,null,null);e.default=i.exports}}]);